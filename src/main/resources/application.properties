spring.application.name=WinnasLoginSession
# CORS Configuration
app.cors.allowed-origins=https://winnasacademy.co.ke/
# This allows cross-origin requests from the specified frontend URL (http://localhost:5173),
# useful when the frontend is running on a different port from the backend.

# ===============================
# Database Configuration (SQL Server)
# ===============================

# Database connection URL
spring.datasource.url=jdbc:sqlserver://192.168.0.100:1433;databaseName=WinnasAcademy;encrypt=false;trustServerCertificate=true;
# - Specifies the SQL Server connection details.
# - `192.168.0.105:1433` ? The server's IP and port.
# - `databaseName=WinnasAcademy` ? The database to connect to.
# - `encrypt=false` ? Disables encryption (not recommended for production).
# - `trustServerCertificate=true` ? Trusts the server certificate (useful for local development).

# Database credentials
spring.datasource.username=sa
spring.datasource.password=Code001@kenya
# - `sa` is the default SQL Server system admin account.
# - **Security Note:** Avoid storing plain-text passwords in production. Use environment variables or Spring Vault.

# ===============================
# Hibernate JPA Configuration
# ===============================
server.port=8086


# Hibernate DDL auto-update mode
spring.jpa.hibernate.ddl-auto=update
# - `update` automatically updates the database schema without dropping data.
# - Other options:
#   - `create` ? Drops and recreates tables on every restart.
#   - `create-drop` ? Same as `create`, but drops tables when the app stops.
#   - `none` ? Does not change the schema (useful for production).

# Show SQL Queries in Console
spring.jpa.show-sql=true
# - Prints SQL statements executed by Hibernate in the console.

# Hibernate Dialect for SQL Server
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.SQLServer2012Dialect
# - Optimizes SQL generation for Microsoft SQL Server 2012+.

# Pretty Format SQL Output
spring.jpa.properties.hibernate.format_sql=true
# - Formats SQL output to make it more readable in logs.

# ===============================
# HikariCP Connection Pool Configuration (Optional)
# ===============================

# Maximum number of connections in the pool
spring.datasource.hikari.maximum-pool-size=10
# - Specifies the maximum number of database connections.

# Connection Idle Timeout (milliseconds)
spring.datasource.hikari.idle-timeout=600000
# - Connections idle for this duration (10 minutes) will be closed.

# Connection Timeout (milliseconds)
spring.datasource.hikari.connection-timeout=30000
# - Maximum time (30 seconds) to wait for a database connection before throwing an error.